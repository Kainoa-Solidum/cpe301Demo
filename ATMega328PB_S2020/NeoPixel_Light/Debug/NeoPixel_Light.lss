
NeoPixel_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000105e  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1f  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ed  00000000  00000000  00001e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000245c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059b  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c5  00000000  00000000  00002a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003244  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 30       	cpi	r26, 0x03	; 3
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  dc:	9b 01       	movw	r18, r22
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	62 0f       	add	r22, r18
  e4:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
  e6:	22 9a       	sbi	0x04, 2	; 4
  
  masklo	=~maskhi&ws2812_PORTREG;
  e8:	25 b1       	in	r18, 0x05	; 5
  ea:	2b 7f       	andi	r18, 0xFB	; 251
  maskhi |=        ws2812_PORTREG;
  ec:	35 b1       	in	r19, 0x05	; 5
  ee:	34 60       	ori	r19, 0x04	; 4
  
  sreg_prev=SREG;
  f0:	4f b7       	in	r20, 0x3f	; 63
  cli();  
  f2:	f8 94       	cli

  while (datlen--) {
  f4:	61 15       	cp	r22, r1
  f6:	71 05       	cpc	r23, r1
  f8:	b1 f0       	breq	.+44     	; 0x126 <loop54+0x22>
  fa:	fc 01       	movw	r30, r24
  fc:	68 0f       	add	r22, r24
  fe:	79 1f       	adc	r23, r25
    curbyte=*data++;
 100:	91 91       	ld	r25, Z+
    
    asm volatile(
 102:	88 e0       	ldi	r24, 0x08	; 8

00000104 <loop54>:
 104:	35 b9       	out	0x05, r19	; 5
 106:	00 00       	nop
 108:	00 c0       	rjmp	.+0      	; 0x10a <loop54+0x6>
 10a:	97 ff       	sbrs	r25, 7
 10c:	25 b9       	out	0x05, r18	; 5
 10e:	99 0f       	add	r25, r25
 110:	00 00       	nop
 112:	00 c0       	rjmp	.+0      	; 0x114 <loop54+0x10>
 114:	00 c0       	rjmp	.+0      	; 0x116 <loop54+0x12>
 116:	00 c0       	rjmp	.+0      	; 0x118 <loop54+0x14>
 118:	25 b9       	out	0x05, r18	; 5
 11a:	00 c0       	rjmp	.+0      	; 0x11c <loop54+0x18>
 11c:	8a 95       	dec	r24
 11e:	91 f7       	brne	.-28     	; 0x104 <loop54>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 120:	e6 17       	cp	r30, r22
 122:	f7 07       	cpc	r31, r23
 124:	69 f7       	brne	.-38     	; 0x100 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 126:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	8f ea       	ldi	r24, 0xAF	; 175
 12a:	94 e0       	ldi	r25, 0x04	; 4
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <loop54+0x28>
 130:	00 c0       	rjmp	.+0      	; 0x132 <loop54+0x2e>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <main>:
  CLKPSR=0;		// set cpu clock prescaler =1 (8Mhz) (attiny 4/5/9/10)
  #endif

  while(1)
  {
    led[0].r=255;led[0].g=00;led[0].b=0;    // Write red to array
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d1 e0       	ldi	r29, 0x01	; 1
 13a:	1f ef       	ldi	r17, 0xFF	; 255
 13c:	01 2f       	mov	r16, r17
 13e:	09 83       	std	Y+1, r16	; 0x01
 140:	18 82       	st	Y, r1
 142:	1a 82       	std	Y+2, r1	; 0x02
    ws2812_setleds(led,1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	ce 01       	movw	r24, r28
 14a:	0e 94 6e 00 	call	0xdc	; 0xdc <ws2812_setleds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	89 e6       	ldi	r24, 0x69	; 105
 152:	98 e1       	ldi	r25, 0x18	; 24
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x1e>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x28>
 15e:	00 00       	nop
    _delay_ms(500);                         // wait for 500ms.

    led[0].r=0;led[0].g=255;led[0].b=0;			// green
 160:	19 82       	std	Y+1, r1	; 0x01
 162:	18 83       	st	Y, r17
 164:	1a 82       	std	Y+2, r1	; 0x02
    ws2812_setleds(led,1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 6e 00 	call	0xdc	; 0xdc <ws2812_setleds>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	89 e6       	ldi	r24, 0x69	; 105
 174:	98 e1       	ldi	r25, 0x18	; 24
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x40>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x4a>
 180:	00 00       	nop
    _delay_ms(500);

    led[0].r=0;led[0].g=00;led[0].b=255;		// blue
 182:	19 82       	std	Y+1, r1	; 0x01
 184:	18 82       	st	Y, r1
 186:	1a 83       	std	Y+2, r17	; 0x02
    ws2812_setleds(led,1);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	ce 01       	movw	r24, r28
 18e:	0e 94 6e 00 	call	0xdc	; 0xdc <ws2812_setleds>
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	89 e6       	ldi	r24, 0x69	; 105
 196:	98 e1       	ldi	r25, 0x18	; 24
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x62>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x6c>
 1a2:	00 00       	nop
 1a4:	cc cf       	rjmp	.-104    	; 0x13e <main+0x8>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
