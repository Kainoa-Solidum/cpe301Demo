
TB6612_SpeedControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000a76  00000b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800140  00800140  00000b4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000daf  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aef  00000000  00000000  00001a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d4  00000000  00000000  0000251e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bf  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fe  00000000  00000000  0000322f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000352d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_1>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_2>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_10>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_13>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e7       	ldi	r30, 0x76	; 118
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 34       	cpi	r26, 0x40	; 64
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e4       	ldi	r26, 0x40	; 64
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 35       	cpi	r26, 0x57	; 87
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  ea:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <ADC_Init>:
  while (!(ADCSRA & (1 << ADIF)))
    ; /* Wait until end of conversion by polling ADC interrupt flag */
  ADCSRA |= (1 << ADIF); /* Clear interrupt flag */
  _delay_us(1);          /* Wait a little bit */
  return ADCW;           /* Return ADC word */
}
  f2:	17 b8       	out	0x07, r1	; 7
  f4:	87 e8       	ldi	r24, 0x87	; 135
  f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  fa:	80 e4       	ldi	r24, 0x40	; 64
  fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 100:	08 95       	ret

00000102 <__vector_1>:

// INT0 interrupt
ISR(INT0_vect) {
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
  // Use for Motor direction one trigger for forward, another for reverse
}
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_2>:

// INT1 interrupt
ISR(INT1_vect) {
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
  // Use for Motor direction one trigger for stop and go
}
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <InitTimer1>:
volatile uint16_t T1Ovs2;  // Overflows for small rotations

// Initialize timer
void InitTimer1(void) {
  // Set PB0 as input
  DDRB &= ~(1 << DDB0);
 12a:	20 98       	cbi	0x04, 0	; 4
  PORTB |= (1 << DDB0);
 12c:	28 9a       	sbi	0x05, 0	; 5

  // Set Initial Timer value
  TCNT1 = 0;
 12e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 132:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  ////First capture on rising edge
  TCCR1A = 0;
 136:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR1B = (0 << ICNC1) | (1 << ICES1);
 13a:	80 e4       	ldi	r24, 0x40	; 64
 13c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  TCCR1C = 0;
 140:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  // Interrupt setup
  // ICIE1: Input capture
  // TOIE1: Timer1 overflow
  TIFR1 = (1 << ICF1) | (1 << TOV1);    // clear pending
 144:	81 e2       	ldi	r24, 0x21	; 33
 146:	86 bb       	out	0x16, r24	; 22
  TIMSK1 = (1 << ICIE1) | (1 << TOIE1); // and enable
 148:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 14c:	08 95       	ret

0000014e <StartTimer1>:
}

void StartTimer1(void) {
  // Start timer without pre-scaler
  TCCR1B |= (1 << CS10);
 14e:	e1 e8       	ldi	r30, 0x81	; 129
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	81 60       	ori	r24, 0x01	; 1
 156:	80 83       	st	Z, r24
  // Enable global interrupts
  sei();
 158:	78 94       	sei
 15a:	08 95       	ret

0000015c <__vector_10>:
}

volatile uint32_t tickv, ticks;
// capture ISR
ISR(TIMER1_CAPT_vect) {
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
    tickv = ICR1; // save duration of last revolution
 17a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 17e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <tickv>
 18a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tickv+0x1>
 18e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <tickv+0x2>
 192:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <tickv+0x3>
    revTickAvg = (uint32_t)(tickv) + ((uint32_t)T1Ovs2 * 0x10000L);
 196:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__data_end>
 19a:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <__data_end+0x1>
 19e:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <tickv>
 1a2:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <tickv+0x1>
 1a6:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <tickv+0x2>
 1aa:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <tickv+0x3>
 1ae:	c9 01       	movw	r24, r18
 1b0:	a0 e0       	ldi	r26, 0x00	; 0
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	dc 01       	movw	r26, r24
 1b6:	99 27       	eor	r25, r25
 1b8:	88 27       	eor	r24, r24
 1ba:	84 0f       	add	r24, r20
 1bc:	95 1f       	adc	r25, r21
 1be:	a6 1f       	adc	r26, r22
 1c0:	b7 1f       	adc	r27, r23
 1c2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <revTickAvg>
 1c6:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <revTickAvg+0x1>
 1ca:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <revTickAvg+0x2>
 1ce:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <revTickAvg+0x3>
  revCtr++;  // add to revolution count
 1d2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <revCtr>
 1d6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <revCtr+0x1>
 1da:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <revCtr+0x2>
 1de:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <revCtr+0x3>
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	a1 1d       	adc	r26, r1
 1e6:	b1 1d       	adc	r27, r1
 1e8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <revCtr>
 1ec:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <revCtr+0x1>
 1f0:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <revCtr+0x2>
 1f4:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <revCtr+0x3>
  TCNT1 = 0; // restart timer for next revolution
 1f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  T1Ovs2 = 0;
 200:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__data_end+0x1>
 204:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
}
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_13>:
// Overflow ISR
ISR(TIMER1_OVF_vect) {
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
  // increment overflow counter
  T1Ovs2++;
 234:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 238:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
 242:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
}
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <main>:

int main(void) {
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	c8 54       	subi	r28, 0x48	; 72
 25e:	d1 09       	sbc	r29, r1
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
  char outs[72];
  USART_Init(9600);
 26a:	60 e8       	ldi	r22, 0x80	; 128
 26c:	75 e2       	ldi	r23, 0x25	; 37
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 97 01 	call	0x32e	; 0x32e <USART_Init>
  USART_SendString("Connected!\r\n"); // we're alive!
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <USART_SendString>
  InitTimer1();
 27e:	0e 94 95 00 	call	0x12a	; 0x12a <InitTimer1>
  StartTimer1();
 282:	0e 94 a7 00 	call	0x14e	; 0x14e <StartTimer1>
  USART_SendString("TIMER1 ICP Running \r\n");
 286:	8d e0       	ldi	r24, 0x0D	; 13
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <USART_SendString>
  /* set PD2 and PD3 as input */
  DDRD &= ~(1 << DDD2);                            /* Make INT0 pin as Input */
 28e:	52 98       	cbi	0x0a, 2	; 10
  DDRD &= ~(1 << DDD3);                            /* Make INT1 pin as Input */
 290:	53 98       	cbi	0x0a, 3	; 10
  PORTD |= (1 << DDD2) | (1 << DDD3);              // turn On the Pull-up
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	8c 60       	ori	r24, 0x0C	; 12
 296:	8b b9       	out	0x0b, r24	; 11
  DDRD |= (1 << DDD6) | (1 << DDD4) | (1 << DDD5); /* Make OC0 pin as Output */
 298:	8a b1       	in	r24, 0x0a	; 10
 29a:	80 67       	ori	r24, 0x70	; 112
 29c:	8a b9       	out	0x0a, r24	; 10
  // We are manually setting the direction
  PORTD |= (1 << DDD5);               // CW Direction Set
 29e:	5d 9a       	sbi	0x0b, 5	; 11
  PORTD &= ~(1 << DDD4);              // CW Direction Set
 2a0:	5c 98       	cbi	0x0b, 4	; 11
  EIMSK |= (1 << INT0) | (1 << INT1); /* enable INT0 and INT1 */
 2a2:	8d b3       	in	r24, 0x1d	; 29
 2a4:	83 60       	ori	r24, 0x03	; 3
 2a6:	8d bb       	out	0x1d, r24	; 29
  MCUCR |= (1 << ISC01) | (1 << ISC11) |
 2a8:	85 b7       	in	r24, 0x35	; 53
 2aa:	8e 60       	ori	r24, 0x0E	; 14
 2ac:	85 bf       	out	0x35, r24	; 53
           (1 << ISC10); /* INT0 - falling edge, INT1 - raising edge */
  sei();                 /* Enable Global Interrupt */
 2ae:	78 94       	sei
  // WE are not using the ADC for speed - just manually setting the value
  ADC_Init(); /* Initialize ADC */
 2b0:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_Init>
  TCNT0 = 0;  /* Set timer0 count zero */
 2b4:	16 bc       	out	0x26, r1	; 38
  TCCR0A |= (1 << WGM00) | (1 << WGM01) | (1 << COM0A1);
 2b6:	84 b5       	in	r24, 0x24	; 36
 2b8:	83 68       	ori	r24, 0x83	; 131
 2ba:	84 bd       	out	0x24, r24	; 36
  TCCR0B |=
 2bc:	85 b5       	in	r24, 0x25	; 37
 2be:	85 60       	ori	r24, 0x05	; 5
 2c0:	85 bd       	out	0x25, r24	; 37
      (1 << CS00) | (1 << CS02); /* Set Fast PWM with Fosc/64 Timer0 clock */
  OCR0A = 30;
 2c2:	8e e1       	ldi	r24, 0x1E	; 30
 2c4:	87 bd       	out	0x27, r24	; 39
  /* ready start value */
  while (1) {
    // Convert ticks to RPM
       // send Speed value to LCD or USART
      USART_SendString("Tick;Period;Frequency  ");
      snprintf(outs, sizeof(outs), "%f ", (float)revTickAvg); // print it
 2c6:	0f 2e       	mov	r0, r31
 2c8:	fb e3       	ldi	r31, 0x3B	; 59
 2ca:	ef 2e       	mov	r14, r31
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	ff 2e       	mov	r15, r31
 2d0:	f0 2d       	mov	r31, r0
 2d2:	0f 2e       	mov	r0, r31
 2d4:	f8 e4       	ldi	r31, 0x48	; 72
 2d6:	df 2e       	mov	r13, r31
 2d8:	f0 2d       	mov	r31, r0
 2da:	8e 01       	movw	r16, r28
 2dc:	0f 5f       	subi	r16, 0xFF	; 255
 2de:	1f 4f       	sbci	r17, 0xFF	; 255
  OCR0A = 30;
  /* ready start value */
  while (1) {
    // Convert ticks to RPM
       // send Speed value to LCD or USART
      USART_SendString("Tick;Period;Frequency  ");
 2e0:	83 e2       	ldi	r24, 0x23	; 35
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <USART_SendString>
      snprintf(outs, sizeof(outs), "%f ", (float)revTickAvg); // print it
 2e8:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <revTickAvg>
 2ec:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <revTickAvg+0x1>
 2f0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <revTickAvg+0x2>
 2f4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <revTickAvg+0x3>
 2f8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__floatunsisf>
 2fc:	9f 93       	push	r25
 2fe:	8f 93       	push	r24
 300:	7f 93       	push	r23
 302:	6f 93       	push	r22
 304:	ff 92       	push	r15
 306:	ef 92       	push	r14
 308:	1f 92       	push	r1
 30a:	df 92       	push	r13
 30c:	1f 93       	push	r17
 30e:	0f 93       	push	r16
 310:	0e 94 41 02 	call	0x482	; 0x482 <snprintf>
      USART_SendString(outs);
 314:	c8 01       	movw	r24, r16
 316:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <USART_SendString>
      USART_SendString(" \r\n");
 31a:	8f e1       	ldi	r24, 0x1F	; 31
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <USART_SendString>
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	d9 cf       	rjmp	.-78     	; 0x2e0 <main+0x8c>

0000032e <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));					/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */ 
}
 32e:	e1 ec       	ldi	r30, 0xC1	; 193
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	20 81       	ld	r18, Z
 334:	28 61       	ori	r18, 0x18	; 24
 336:	20 83       	st	Z, r18
 338:	e2 ec       	ldi	r30, 0xC2	; 194
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	20 81       	ld	r18, Z
 33e:	26 60       	ori	r18, 0x06	; 6
 340:	20 83       	st	Z, r18
 342:	dc 01       	movw	r26, r24
 344:	cb 01       	movw	r24, r22
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	aa 1f       	adc	r26, r26
 34c:	bb 1f       	adc	r27, r27
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	aa 1f       	adc	r26, r26
 354:	bb 1f       	adc	r27, r27
 356:	9c 01       	movw	r18, r24
 358:	ad 01       	movw	r20, r26
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	44 1f       	adc	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	44 1f       	adc	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	74 e2       	ldi	r23, 0x24	; 36
 36e:	84 ef       	ldi	r24, 0xF4	; 244
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 1f 02 	call	0x43e	; 0x43e <__udivmodsi4>
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	82 0f       	add	r24, r18
 37a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 37e:	da 01       	movw	r26, r20
 380:	c9 01       	movw	r24, r18
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	a1 09       	sbc	r26, r1
 386:	b1 09       	sbc	r27, r1
 388:	89 2f       	mov	r24, r25
 38a:	9a 2f       	mov	r25, r26
 38c:	ab 2f       	mov	r26, r27
 38e:	bb 27       	eor	r27, r27
 390:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 394:	08 95       	ret

00000396 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
 396:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
 39a:	e0 ec       	ldi	r30, 0xC0	; 192
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	85 ff       	sbrs	r24, 5
 3a2:	fd cf       	rjmp	.-6      	; 0x39e <USART_TxChar+0x8>
}
 3a4:	08 95       	ret

000003a6 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
 3ac:	88 81       	ld	r24, Y
 3ae:	88 23       	and	r24, r24
 3b0:	31 f0       	breq	.+12     	; 0x3be <USART_SendString+0x18>
 3b2:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
 3b4:	0e 94 cb 01 	call	0x396	; 0x396 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
 3b8:	89 91       	ld	r24, Y+
 3ba:	81 11       	cpse	r24, r1
 3bc:	fb cf       	rjmp	.-10     	; 0x3b4 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <__floatunsisf>:
 3c4:	e8 94       	clt
 3c6:	09 c0       	rjmp	.+18     	; 0x3da <__floatsisf+0x12>

000003c8 <__floatsisf>:
 3c8:	97 fb       	bst	r25, 7
 3ca:	3e f4       	brtc	.+14     	; 0x3da <__floatsisf+0x12>
 3cc:	90 95       	com	r25
 3ce:	80 95       	com	r24
 3d0:	70 95       	com	r23
 3d2:	61 95       	neg	r22
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	8f 4f       	sbci	r24, 0xFF	; 255
 3d8:	9f 4f       	sbci	r25, 0xFF	; 255
 3da:	99 23       	and	r25, r25
 3dc:	a9 f0       	breq	.+42     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3de:	f9 2f       	mov	r31, r25
 3e0:	96 e9       	ldi	r25, 0x96	; 150
 3e2:	bb 27       	eor	r27, r27
 3e4:	93 95       	inc	r25
 3e6:	f6 95       	lsr	r31
 3e8:	87 95       	ror	r24
 3ea:	77 95       	ror	r23
 3ec:	67 95       	ror	r22
 3ee:	b7 95       	ror	r27
 3f0:	f1 11       	cpse	r31, r1
 3f2:	f8 cf       	rjmp	.-16     	; 0x3e4 <__floatsisf+0x1c>
 3f4:	fa f4       	brpl	.+62     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3f6:	bb 0f       	add	r27, r27
 3f8:	11 f4       	brne	.+4      	; 0x3fe <__floatsisf+0x36>
 3fa:	60 ff       	sbrs	r22, 0
 3fc:	1b c0       	rjmp	.+54     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	8f 4f       	sbci	r24, 0xFF	; 255
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	16 c0       	rjmp	.+44     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 408:	88 23       	and	r24, r24
 40a:	11 f0       	breq	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	96 e9       	ldi	r25, 0x96	; 150
 40e:	11 c0       	rjmp	.+34     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 410:	77 23       	and	r23, r23
 412:	21 f0       	breq	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 414:	9e e8       	ldi	r25, 0x8E	; 142
 416:	87 2f       	mov	r24, r23
 418:	76 2f       	mov	r23, r22
 41a:	05 c0       	rjmp	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41c:	66 23       	and	r22, r22
 41e:	71 f0       	breq	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 420:	96 e8       	ldi	r25, 0x86	; 134
 422:	86 2f       	mov	r24, r22
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	2a f0       	brmi	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42a:	9a 95       	dec	r25
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	da f7       	brpl	.-10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 434:	88 0f       	add	r24, r24
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	97 f9       	bld	r25, 7
 43c:	08 95       	ret

0000043e <__udivmodsi4>:
 43e:	a1 e2       	ldi	r26, 0x21	; 33
 440:	1a 2e       	mov	r1, r26
 442:	aa 1b       	sub	r26, r26
 444:	bb 1b       	sub	r27, r27
 446:	fd 01       	movw	r30, r26
 448:	0d c0       	rjmp	.+26     	; 0x464 <__udivmodsi4_ep>

0000044a <__udivmodsi4_loop>:
 44a:	aa 1f       	adc	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	ee 1f       	adc	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	a2 17       	cp	r26, r18
 454:	b3 07       	cpc	r27, r19
 456:	e4 07       	cpc	r30, r20
 458:	f5 07       	cpc	r31, r21
 45a:	20 f0       	brcs	.+8      	; 0x464 <__udivmodsi4_ep>
 45c:	a2 1b       	sub	r26, r18
 45e:	b3 0b       	sbc	r27, r19
 460:	e4 0b       	sbc	r30, r20
 462:	f5 0b       	sbc	r31, r21

00000464 <__udivmodsi4_ep>:
 464:	66 1f       	adc	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	1a 94       	dec	r1
 46e:	69 f7       	brne	.-38     	; 0x44a <__udivmodsi4_loop>
 470:	60 95       	com	r22
 472:	70 95       	com	r23
 474:	80 95       	com	r24
 476:	90 95       	com	r25
 478:	9b 01       	movw	r18, r22
 47a:	ac 01       	movw	r20, r24
 47c:	bd 01       	movw	r22, r26
 47e:	cf 01       	movw	r24, r30
 480:	08 95       	ret

00000482 <snprintf>:
 482:	ae e0       	ldi	r26, 0x0E	; 14
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	e7 e4       	ldi	r30, 0x47	; 71
 488:	f2 e0       	ldi	r31, 0x02	; 2
 48a:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__prologue_saves__+0x1c>
 48e:	0d 89       	ldd	r16, Y+21	; 0x15
 490:	1e 89       	ldd	r17, Y+22	; 0x16
 492:	8f 89       	ldd	r24, Y+23	; 0x17
 494:	98 8d       	ldd	r25, Y+24	; 0x18
 496:	26 e0       	ldi	r18, 0x06	; 6
 498:	2c 83       	std	Y+4, r18	; 0x04
 49a:	1a 83       	std	Y+2, r17	; 0x02
 49c:	09 83       	std	Y+1, r16	; 0x01
 49e:	97 ff       	sbrs	r25, 7
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <snprintf+0x24>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e8       	ldi	r25, 0x80	; 128
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	9e 83       	std	Y+6, r25	; 0x06
 4aa:	8d 83       	std	Y+5, r24	; 0x05
 4ac:	ae 01       	movw	r20, r28
 4ae:	45 5e       	subi	r20, 0xE5	; 229
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	69 8d       	ldd	r22, Y+25	; 0x19
 4b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
 4b6:	ce 01       	movw	r24, r28
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	0e 94 71 02 	call	0x4e2	; 0x4e2 <vfprintf>
 4be:	4d 81       	ldd	r20, Y+5	; 0x05
 4c0:	5e 81       	ldd	r21, Y+6	; 0x06
 4c2:	57 fd       	sbrc	r21, 7
 4c4:	0a c0       	rjmp	.+20     	; 0x4da <snprintf+0x58>
 4c6:	2f 81       	ldd	r18, Y+7	; 0x07
 4c8:	38 85       	ldd	r19, Y+8	; 0x08
 4ca:	42 17       	cp	r20, r18
 4cc:	53 07       	cpc	r21, r19
 4ce:	0c f4       	brge	.+2      	; 0x4d2 <snprintf+0x50>
 4d0:	9a 01       	movw	r18, r20
 4d2:	f8 01       	movw	r30, r16
 4d4:	e2 0f       	add	r30, r18
 4d6:	f3 1f       	adc	r31, r19
 4d8:	10 82       	st	Z, r1
 4da:	2e 96       	adiw	r28, 0x0e	; 14
 4dc:	e4 e0       	ldi	r30, 0x04	; 4
 4de:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__epilogue_restores__+0x1c>

000004e2 <vfprintf>:
 4e2:	ab e0       	ldi	r26, 0x0B	; 11
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e7 e7       	ldi	r30, 0x77	; 119
 4e8:	f2 e0       	ldi	r31, 0x02	; 2
 4ea:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__prologue_saves__>
 4ee:	6c 01       	movw	r12, r24
 4f0:	7b 01       	movw	r14, r22
 4f2:	8a 01       	movw	r16, r20
 4f4:	fc 01       	movw	r30, r24
 4f6:	17 82       	std	Z+7, r1	; 0x07
 4f8:	16 82       	std	Z+6, r1	; 0x06
 4fa:	83 81       	ldd	r24, Z+3	; 0x03
 4fc:	81 ff       	sbrs	r24, 1
 4fe:	cc c1       	rjmp	.+920    	; 0x898 <vfprintf+0x3b6>
 500:	ce 01       	movw	r24, r28
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	3c 01       	movw	r6, r24
 506:	f6 01       	movw	r30, r12
 508:	93 81       	ldd	r25, Z+3	; 0x03
 50a:	f7 01       	movw	r30, r14
 50c:	93 fd       	sbrc	r25, 3
 50e:	85 91       	lpm	r24, Z+
 510:	93 ff       	sbrs	r25, 3
 512:	81 91       	ld	r24, Z+
 514:	7f 01       	movw	r14, r30
 516:	88 23       	and	r24, r24
 518:	09 f4       	brne	.+2      	; 0x51c <vfprintf+0x3a>
 51a:	ba c1       	rjmp	.+884    	; 0x890 <vfprintf+0x3ae>
 51c:	85 32       	cpi	r24, 0x25	; 37
 51e:	39 f4       	brne	.+14     	; 0x52e <vfprintf+0x4c>
 520:	93 fd       	sbrc	r25, 3
 522:	85 91       	lpm	r24, Z+
 524:	93 ff       	sbrs	r25, 3
 526:	81 91       	ld	r24, Z+
 528:	7f 01       	movw	r14, r30
 52a:	85 32       	cpi	r24, 0x25	; 37
 52c:	29 f4       	brne	.+10     	; 0x538 <vfprintf+0x56>
 52e:	b6 01       	movw	r22, r12
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 536:	e7 cf       	rjmp	.-50     	; 0x506 <vfprintf+0x24>
 538:	91 2c       	mov	r9, r1
 53a:	21 2c       	mov	r2, r1
 53c:	31 2c       	mov	r3, r1
 53e:	ff e1       	ldi	r31, 0x1F	; 31
 540:	f3 15       	cp	r31, r3
 542:	d8 f0       	brcs	.+54     	; 0x57a <vfprintf+0x98>
 544:	8b 32       	cpi	r24, 0x2B	; 43
 546:	79 f0       	breq	.+30     	; 0x566 <vfprintf+0x84>
 548:	38 f4       	brcc	.+14     	; 0x558 <vfprintf+0x76>
 54a:	80 32       	cpi	r24, 0x20	; 32
 54c:	79 f0       	breq	.+30     	; 0x56c <vfprintf+0x8a>
 54e:	83 32       	cpi	r24, 0x23	; 35
 550:	a1 f4       	brne	.+40     	; 0x57a <vfprintf+0x98>
 552:	23 2d       	mov	r18, r3
 554:	20 61       	ori	r18, 0x10	; 16
 556:	1d c0       	rjmp	.+58     	; 0x592 <vfprintf+0xb0>
 558:	8d 32       	cpi	r24, 0x2D	; 45
 55a:	61 f0       	breq	.+24     	; 0x574 <vfprintf+0x92>
 55c:	80 33       	cpi	r24, 0x30	; 48
 55e:	69 f4       	brne	.+26     	; 0x57a <vfprintf+0x98>
 560:	23 2d       	mov	r18, r3
 562:	21 60       	ori	r18, 0x01	; 1
 564:	16 c0       	rjmp	.+44     	; 0x592 <vfprintf+0xb0>
 566:	83 2d       	mov	r24, r3
 568:	82 60       	ori	r24, 0x02	; 2
 56a:	38 2e       	mov	r3, r24
 56c:	e3 2d       	mov	r30, r3
 56e:	e4 60       	ori	r30, 0x04	; 4
 570:	3e 2e       	mov	r3, r30
 572:	2a c0       	rjmp	.+84     	; 0x5c8 <vfprintf+0xe6>
 574:	f3 2d       	mov	r31, r3
 576:	f8 60       	ori	r31, 0x08	; 8
 578:	1d c0       	rjmp	.+58     	; 0x5b4 <vfprintf+0xd2>
 57a:	37 fc       	sbrc	r3, 7
 57c:	2d c0       	rjmp	.+90     	; 0x5d8 <vfprintf+0xf6>
 57e:	20 ed       	ldi	r18, 0xD0	; 208
 580:	28 0f       	add	r18, r24
 582:	2a 30       	cpi	r18, 0x0A	; 10
 584:	40 f0       	brcs	.+16     	; 0x596 <vfprintf+0xb4>
 586:	8e 32       	cpi	r24, 0x2E	; 46
 588:	b9 f4       	brne	.+46     	; 0x5b8 <vfprintf+0xd6>
 58a:	36 fc       	sbrc	r3, 6
 58c:	81 c1       	rjmp	.+770    	; 0x890 <vfprintf+0x3ae>
 58e:	23 2d       	mov	r18, r3
 590:	20 64       	ori	r18, 0x40	; 64
 592:	32 2e       	mov	r3, r18
 594:	19 c0       	rjmp	.+50     	; 0x5c8 <vfprintf+0xe6>
 596:	36 fe       	sbrs	r3, 6
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <vfprintf+0xc4>
 59a:	8a e0       	ldi	r24, 0x0A	; 10
 59c:	98 9e       	mul	r9, r24
 59e:	20 0d       	add	r18, r0
 5a0:	11 24       	eor	r1, r1
 5a2:	92 2e       	mov	r9, r18
 5a4:	11 c0       	rjmp	.+34     	; 0x5c8 <vfprintf+0xe6>
 5a6:	ea e0       	ldi	r30, 0x0A	; 10
 5a8:	2e 9e       	mul	r2, r30
 5aa:	20 0d       	add	r18, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	22 2e       	mov	r2, r18
 5b0:	f3 2d       	mov	r31, r3
 5b2:	f0 62       	ori	r31, 0x20	; 32
 5b4:	3f 2e       	mov	r3, r31
 5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <vfprintf+0xe6>
 5b8:	8c 36       	cpi	r24, 0x6C	; 108
 5ba:	21 f4       	brne	.+8      	; 0x5c4 <vfprintf+0xe2>
 5bc:	83 2d       	mov	r24, r3
 5be:	80 68       	ori	r24, 0x80	; 128
 5c0:	38 2e       	mov	r3, r24
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <vfprintf+0xe6>
 5c4:	88 36       	cpi	r24, 0x68	; 104
 5c6:	41 f4       	brne	.+16     	; 0x5d8 <vfprintf+0xf6>
 5c8:	f7 01       	movw	r30, r14
 5ca:	93 fd       	sbrc	r25, 3
 5cc:	85 91       	lpm	r24, Z+
 5ce:	93 ff       	sbrs	r25, 3
 5d0:	81 91       	ld	r24, Z+
 5d2:	7f 01       	movw	r14, r30
 5d4:	81 11       	cpse	r24, r1
 5d6:	b3 cf       	rjmp	.-154    	; 0x53e <vfprintf+0x5c>
 5d8:	98 2f       	mov	r25, r24
 5da:	9f 7d       	andi	r25, 0xDF	; 223
 5dc:	95 54       	subi	r25, 0x45	; 69
 5de:	93 30       	cpi	r25, 0x03	; 3
 5e0:	28 f4       	brcc	.+10     	; 0x5ec <vfprintf+0x10a>
 5e2:	0c 5f       	subi	r16, 0xFC	; 252
 5e4:	1f 4f       	sbci	r17, 0xFF	; 255
 5e6:	9f e3       	ldi	r25, 0x3F	; 63
 5e8:	99 83       	std	Y+1, r25	; 0x01
 5ea:	0d c0       	rjmp	.+26     	; 0x606 <vfprintf+0x124>
 5ec:	83 36       	cpi	r24, 0x63	; 99
 5ee:	31 f0       	breq	.+12     	; 0x5fc <vfprintf+0x11a>
 5f0:	83 37       	cpi	r24, 0x73	; 115
 5f2:	71 f0       	breq	.+28     	; 0x610 <vfprintf+0x12e>
 5f4:	83 35       	cpi	r24, 0x53	; 83
 5f6:	09 f0       	breq	.+2      	; 0x5fa <vfprintf+0x118>
 5f8:	59 c0       	rjmp	.+178    	; 0x6ac <vfprintf+0x1ca>
 5fa:	21 c0       	rjmp	.+66     	; 0x63e <vfprintf+0x15c>
 5fc:	f8 01       	movw	r30, r16
 5fe:	80 81       	ld	r24, Z
 600:	89 83       	std	Y+1, r24	; 0x01
 602:	0e 5f       	subi	r16, 0xFE	; 254
 604:	1f 4f       	sbci	r17, 0xFF	; 255
 606:	88 24       	eor	r8, r8
 608:	83 94       	inc	r8
 60a:	91 2c       	mov	r9, r1
 60c:	53 01       	movw	r10, r6
 60e:	13 c0       	rjmp	.+38     	; 0x636 <vfprintf+0x154>
 610:	28 01       	movw	r4, r16
 612:	f2 e0       	ldi	r31, 0x02	; 2
 614:	4f 0e       	add	r4, r31
 616:	51 1c       	adc	r5, r1
 618:	f8 01       	movw	r30, r16
 61a:	a0 80       	ld	r10, Z
 61c:	b1 80       	ldd	r11, Z+1	; 0x01
 61e:	36 fe       	sbrs	r3, 6
 620:	03 c0       	rjmp	.+6      	; 0x628 <vfprintf+0x146>
 622:	69 2d       	mov	r22, r9
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <vfprintf+0x14a>
 628:	6f ef       	ldi	r22, 0xFF	; 255
 62a:	7f ef       	ldi	r23, 0xFF	; 255
 62c:	c5 01       	movw	r24, r10
 62e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <strnlen>
 632:	4c 01       	movw	r8, r24
 634:	82 01       	movw	r16, r4
 636:	f3 2d       	mov	r31, r3
 638:	ff 77       	andi	r31, 0x7F	; 127
 63a:	3f 2e       	mov	r3, r31
 63c:	16 c0       	rjmp	.+44     	; 0x66a <vfprintf+0x188>
 63e:	28 01       	movw	r4, r16
 640:	22 e0       	ldi	r18, 0x02	; 2
 642:	42 0e       	add	r4, r18
 644:	51 1c       	adc	r5, r1
 646:	f8 01       	movw	r30, r16
 648:	a0 80       	ld	r10, Z
 64a:	b1 80       	ldd	r11, Z+1	; 0x01
 64c:	36 fe       	sbrs	r3, 6
 64e:	03 c0       	rjmp	.+6      	; 0x656 <vfprintf+0x174>
 650:	69 2d       	mov	r22, r9
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <vfprintf+0x178>
 656:	6f ef       	ldi	r22, 0xFF	; 255
 658:	7f ef       	ldi	r23, 0xFF	; 255
 65a:	c5 01       	movw	r24, r10
 65c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <strnlen_P>
 660:	4c 01       	movw	r8, r24
 662:	f3 2d       	mov	r31, r3
 664:	f0 68       	ori	r31, 0x80	; 128
 666:	3f 2e       	mov	r3, r31
 668:	82 01       	movw	r16, r4
 66a:	33 fc       	sbrc	r3, 3
 66c:	1b c0       	rjmp	.+54     	; 0x6a4 <vfprintf+0x1c2>
 66e:	82 2d       	mov	r24, r2
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	88 16       	cp	r8, r24
 674:	99 06       	cpc	r9, r25
 676:	b0 f4       	brcc	.+44     	; 0x6a4 <vfprintf+0x1c2>
 678:	b6 01       	movw	r22, r12
 67a:	80 e2       	ldi	r24, 0x20	; 32
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 682:	2a 94       	dec	r2
 684:	f4 cf       	rjmp	.-24     	; 0x66e <vfprintf+0x18c>
 686:	f5 01       	movw	r30, r10
 688:	37 fc       	sbrc	r3, 7
 68a:	85 91       	lpm	r24, Z+
 68c:	37 fe       	sbrs	r3, 7
 68e:	81 91       	ld	r24, Z+
 690:	5f 01       	movw	r10, r30
 692:	b6 01       	movw	r22, r12
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 69a:	21 10       	cpse	r2, r1
 69c:	2a 94       	dec	r2
 69e:	21 e0       	ldi	r18, 0x01	; 1
 6a0:	82 1a       	sub	r8, r18
 6a2:	91 08       	sbc	r9, r1
 6a4:	81 14       	cp	r8, r1
 6a6:	91 04       	cpc	r9, r1
 6a8:	71 f7       	brne	.-36     	; 0x686 <vfprintf+0x1a4>
 6aa:	e8 c0       	rjmp	.+464    	; 0x87c <vfprintf+0x39a>
 6ac:	84 36       	cpi	r24, 0x64	; 100
 6ae:	11 f0       	breq	.+4      	; 0x6b4 <vfprintf+0x1d2>
 6b0:	89 36       	cpi	r24, 0x69	; 105
 6b2:	41 f5       	brne	.+80     	; 0x704 <vfprintf+0x222>
 6b4:	f8 01       	movw	r30, r16
 6b6:	37 fe       	sbrs	r3, 7
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <vfprintf+0x1e6>
 6ba:	60 81       	ld	r22, Z
 6bc:	71 81       	ldd	r23, Z+1	; 0x01
 6be:	82 81       	ldd	r24, Z+2	; 0x02
 6c0:	93 81       	ldd	r25, Z+3	; 0x03
 6c2:	0c 5f       	subi	r16, 0xFC	; 252
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <vfprintf+0x1f6>
 6c8:	60 81       	ld	r22, Z
 6ca:	71 81       	ldd	r23, Z+1	; 0x01
 6cc:	07 2e       	mov	r0, r23
 6ce:	00 0c       	add	r0, r0
 6d0:	88 0b       	sbc	r24, r24
 6d2:	99 0b       	sbc	r25, r25
 6d4:	0e 5f       	subi	r16, 0xFE	; 254
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	f3 2d       	mov	r31, r3
 6da:	ff 76       	andi	r31, 0x6F	; 111
 6dc:	3f 2e       	mov	r3, r31
 6de:	97 ff       	sbrs	r25, 7
 6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <vfprintf+0x212>
 6e2:	90 95       	com	r25
 6e4:	80 95       	com	r24
 6e6:	70 95       	com	r23
 6e8:	61 95       	neg	r22
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	8f 4f       	sbci	r24, 0xFF	; 255
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	f0 68       	ori	r31, 0x80	; 128
 6f2:	3f 2e       	mov	r3, r31
 6f4:	2a e0       	ldi	r18, 0x0A	; 10
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	a3 01       	movw	r20, r6
 6fa:	0e 94 a4 04 	call	0x948	; 0x948 <__ultoa_invert>
 6fe:	88 2e       	mov	r8, r24
 700:	86 18       	sub	r8, r6
 702:	45 c0       	rjmp	.+138    	; 0x78e <vfprintf+0x2ac>
 704:	85 37       	cpi	r24, 0x75	; 117
 706:	31 f4       	brne	.+12     	; 0x714 <vfprintf+0x232>
 708:	23 2d       	mov	r18, r3
 70a:	2f 7e       	andi	r18, 0xEF	; 239
 70c:	b2 2e       	mov	r11, r18
 70e:	2a e0       	ldi	r18, 0x0A	; 10
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	25 c0       	rjmp	.+74     	; 0x75e <vfprintf+0x27c>
 714:	93 2d       	mov	r25, r3
 716:	99 7f       	andi	r25, 0xF9	; 249
 718:	b9 2e       	mov	r11, r25
 71a:	8f 36       	cpi	r24, 0x6F	; 111
 71c:	c1 f0       	breq	.+48     	; 0x74e <vfprintf+0x26c>
 71e:	18 f4       	brcc	.+6      	; 0x726 <vfprintf+0x244>
 720:	88 35       	cpi	r24, 0x58	; 88
 722:	79 f0       	breq	.+30     	; 0x742 <vfprintf+0x260>
 724:	b5 c0       	rjmp	.+362    	; 0x890 <vfprintf+0x3ae>
 726:	80 37       	cpi	r24, 0x70	; 112
 728:	19 f0       	breq	.+6      	; 0x730 <vfprintf+0x24e>
 72a:	88 37       	cpi	r24, 0x78	; 120
 72c:	21 f0       	breq	.+8      	; 0x736 <vfprintf+0x254>
 72e:	b0 c0       	rjmp	.+352    	; 0x890 <vfprintf+0x3ae>
 730:	e9 2f       	mov	r30, r25
 732:	e0 61       	ori	r30, 0x10	; 16
 734:	be 2e       	mov	r11, r30
 736:	b4 fe       	sbrs	r11, 4
 738:	0d c0       	rjmp	.+26     	; 0x754 <vfprintf+0x272>
 73a:	fb 2d       	mov	r31, r11
 73c:	f4 60       	ori	r31, 0x04	; 4
 73e:	bf 2e       	mov	r11, r31
 740:	09 c0       	rjmp	.+18     	; 0x754 <vfprintf+0x272>
 742:	34 fe       	sbrs	r3, 4
 744:	0a c0       	rjmp	.+20     	; 0x75a <vfprintf+0x278>
 746:	29 2f       	mov	r18, r25
 748:	26 60       	ori	r18, 0x06	; 6
 74a:	b2 2e       	mov	r11, r18
 74c:	06 c0       	rjmp	.+12     	; 0x75a <vfprintf+0x278>
 74e:	28 e0       	ldi	r18, 0x08	; 8
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	05 c0       	rjmp	.+10     	; 0x75e <vfprintf+0x27c>
 754:	20 e1       	ldi	r18, 0x10	; 16
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <vfprintf+0x27c>
 75a:	20 e1       	ldi	r18, 0x10	; 16
 75c:	32 e0       	ldi	r19, 0x02	; 2
 75e:	f8 01       	movw	r30, r16
 760:	b7 fe       	sbrs	r11, 7
 762:	07 c0       	rjmp	.+14     	; 0x772 <vfprintf+0x290>
 764:	60 81       	ld	r22, Z
 766:	71 81       	ldd	r23, Z+1	; 0x01
 768:	82 81       	ldd	r24, Z+2	; 0x02
 76a:	93 81       	ldd	r25, Z+3	; 0x03
 76c:	0c 5f       	subi	r16, 0xFC	; 252
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0x29c>
 772:	60 81       	ld	r22, Z
 774:	71 81       	ldd	r23, Z+1	; 0x01
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 5f       	subi	r16, 0xFE	; 254
 77c:	1f 4f       	sbci	r17, 0xFF	; 255
 77e:	a3 01       	movw	r20, r6
 780:	0e 94 a4 04 	call	0x948	; 0x948 <__ultoa_invert>
 784:	88 2e       	mov	r8, r24
 786:	86 18       	sub	r8, r6
 788:	fb 2d       	mov	r31, r11
 78a:	ff 77       	andi	r31, 0x7F	; 127
 78c:	3f 2e       	mov	r3, r31
 78e:	36 fe       	sbrs	r3, 6
 790:	0d c0       	rjmp	.+26     	; 0x7ac <vfprintf+0x2ca>
 792:	23 2d       	mov	r18, r3
 794:	2e 7f       	andi	r18, 0xFE	; 254
 796:	a2 2e       	mov	r10, r18
 798:	89 14       	cp	r8, r9
 79a:	58 f4       	brcc	.+22     	; 0x7b2 <vfprintf+0x2d0>
 79c:	34 fe       	sbrs	r3, 4
 79e:	0b c0       	rjmp	.+22     	; 0x7b6 <vfprintf+0x2d4>
 7a0:	32 fc       	sbrc	r3, 2
 7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <vfprintf+0x2d4>
 7a4:	83 2d       	mov	r24, r3
 7a6:	8e 7e       	andi	r24, 0xEE	; 238
 7a8:	a8 2e       	mov	r10, r24
 7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <vfprintf+0x2d4>
 7ac:	b8 2c       	mov	r11, r8
 7ae:	a3 2c       	mov	r10, r3
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <vfprintf+0x2d6>
 7b2:	b8 2c       	mov	r11, r8
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <vfprintf+0x2d6>
 7b6:	b9 2c       	mov	r11, r9
 7b8:	a4 fe       	sbrs	r10, 4
 7ba:	0f c0       	rjmp	.+30     	; 0x7da <vfprintf+0x2f8>
 7bc:	fe 01       	movw	r30, r28
 7be:	e8 0d       	add	r30, r8
 7c0:	f1 1d       	adc	r31, r1
 7c2:	80 81       	ld	r24, Z
 7c4:	80 33       	cpi	r24, 0x30	; 48
 7c6:	21 f4       	brne	.+8      	; 0x7d0 <vfprintf+0x2ee>
 7c8:	9a 2d       	mov	r25, r10
 7ca:	99 7e       	andi	r25, 0xE9	; 233
 7cc:	a9 2e       	mov	r10, r25
 7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <vfprintf+0x300>
 7d0:	a2 fe       	sbrs	r10, 2
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <vfprintf+0x2fe>
 7d4:	b3 94       	inc	r11
 7d6:	b3 94       	inc	r11
 7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <vfprintf+0x300>
 7da:	8a 2d       	mov	r24, r10
 7dc:	86 78       	andi	r24, 0x86	; 134
 7de:	09 f0       	breq	.+2      	; 0x7e2 <vfprintf+0x300>
 7e0:	b3 94       	inc	r11
 7e2:	a3 fc       	sbrc	r10, 3
 7e4:	11 c0       	rjmp	.+34     	; 0x808 <vfprintf+0x326>
 7e6:	a0 fe       	sbrs	r10, 0
 7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <vfprintf+0x314>
 7ea:	b2 14       	cp	r11, r2
 7ec:	88 f4       	brcc	.+34     	; 0x810 <vfprintf+0x32e>
 7ee:	28 0c       	add	r2, r8
 7f0:	92 2c       	mov	r9, r2
 7f2:	9b 18       	sub	r9, r11
 7f4:	0e c0       	rjmp	.+28     	; 0x812 <vfprintf+0x330>
 7f6:	b2 14       	cp	r11, r2
 7f8:	60 f4       	brcc	.+24     	; 0x812 <vfprintf+0x330>
 7fa:	b6 01       	movw	r22, r12
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 804:	b3 94       	inc	r11
 806:	f7 cf       	rjmp	.-18     	; 0x7f6 <vfprintf+0x314>
 808:	b2 14       	cp	r11, r2
 80a:	18 f4       	brcc	.+6      	; 0x812 <vfprintf+0x330>
 80c:	2b 18       	sub	r2, r11
 80e:	02 c0       	rjmp	.+4      	; 0x814 <vfprintf+0x332>
 810:	98 2c       	mov	r9, r8
 812:	21 2c       	mov	r2, r1
 814:	a4 fe       	sbrs	r10, 4
 816:	10 c0       	rjmp	.+32     	; 0x838 <vfprintf+0x356>
 818:	b6 01       	movw	r22, r12
 81a:	80 e3       	ldi	r24, 0x30	; 48
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 822:	a2 fe       	sbrs	r10, 2
 824:	17 c0       	rjmp	.+46     	; 0x854 <vfprintf+0x372>
 826:	a1 fc       	sbrc	r10, 1
 828:	03 c0       	rjmp	.+6      	; 0x830 <vfprintf+0x34e>
 82a:	88 e7       	ldi	r24, 0x78	; 120
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0x352>
 830:	88 e5       	ldi	r24, 0x58	; 88
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	b6 01       	movw	r22, r12
 836:	0c c0       	rjmp	.+24     	; 0x850 <vfprintf+0x36e>
 838:	8a 2d       	mov	r24, r10
 83a:	86 78       	andi	r24, 0x86	; 134
 83c:	59 f0       	breq	.+22     	; 0x854 <vfprintf+0x372>
 83e:	a1 fe       	sbrs	r10, 1
 840:	02 c0       	rjmp	.+4      	; 0x846 <vfprintf+0x364>
 842:	8b e2       	ldi	r24, 0x2B	; 43
 844:	01 c0       	rjmp	.+2      	; 0x848 <vfprintf+0x366>
 846:	80 e2       	ldi	r24, 0x20	; 32
 848:	a7 fc       	sbrc	r10, 7
 84a:	8d e2       	ldi	r24, 0x2D	; 45
 84c:	b6 01       	movw	r22, r12
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 854:	89 14       	cp	r8, r9
 856:	38 f4       	brcc	.+14     	; 0x866 <vfprintf+0x384>
 858:	b6 01       	movw	r22, r12
 85a:	80 e3       	ldi	r24, 0x30	; 48
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 862:	9a 94       	dec	r9
 864:	f7 cf       	rjmp	.-18     	; 0x854 <vfprintf+0x372>
 866:	8a 94       	dec	r8
 868:	f3 01       	movw	r30, r6
 86a:	e8 0d       	add	r30, r8
 86c:	f1 1d       	adc	r31, r1
 86e:	80 81       	ld	r24, Z
 870:	b6 01       	movw	r22, r12
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 878:	81 10       	cpse	r8, r1
 87a:	f5 cf       	rjmp	.-22     	; 0x866 <vfprintf+0x384>
 87c:	22 20       	and	r2, r2
 87e:	09 f4       	brne	.+2      	; 0x882 <vfprintf+0x3a0>
 880:	42 ce       	rjmp	.-892    	; 0x506 <vfprintf+0x24>
 882:	b6 01       	movw	r22, r12
 884:	80 e2       	ldi	r24, 0x20	; 32
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fputc>
 88c:	2a 94       	dec	r2
 88e:	f6 cf       	rjmp	.-20     	; 0x87c <vfprintf+0x39a>
 890:	f6 01       	movw	r30, r12
 892:	86 81       	ldd	r24, Z+6	; 0x06
 894:	97 81       	ldd	r25, Z+7	; 0x07
 896:	02 c0       	rjmp	.+4      	; 0x89c <vfprintf+0x3ba>
 898:	8f ef       	ldi	r24, 0xFF	; 255
 89a:	9f ef       	ldi	r25, 0xFF	; 255
 89c:	2b 96       	adiw	r28, 0x0b	; 11
 89e:	e2 e1       	ldi	r30, 0x12	; 18
 8a0:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__epilogue_restores__>

000008a4 <strnlen_P>:
 8a4:	fc 01       	movw	r30, r24
 8a6:	05 90       	lpm	r0, Z+
 8a8:	61 50       	subi	r22, 0x01	; 1
 8aa:	70 40       	sbci	r23, 0x00	; 0
 8ac:	01 10       	cpse	r0, r1
 8ae:	d8 f7       	brcc	.-10     	; 0x8a6 <strnlen_P+0x2>
 8b0:	80 95       	com	r24
 8b2:	90 95       	com	r25
 8b4:	8e 0f       	add	r24, r30
 8b6:	9f 1f       	adc	r25, r31
 8b8:	08 95       	ret

000008ba <strnlen>:
 8ba:	fc 01       	movw	r30, r24
 8bc:	61 50       	subi	r22, 0x01	; 1
 8be:	70 40       	sbci	r23, 0x00	; 0
 8c0:	01 90       	ld	r0, Z+
 8c2:	01 10       	cpse	r0, r1
 8c4:	d8 f7       	brcc	.-10     	; 0x8bc <strnlen+0x2>
 8c6:	80 95       	com	r24
 8c8:	90 95       	com	r25
 8ca:	8e 0f       	add	r24, r30
 8cc:	9f 1f       	adc	r25, r31
 8ce:	08 95       	ret

000008d0 <fputc>:
 8d0:	0f 93       	push	r16
 8d2:	1f 93       	push	r17
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	fb 01       	movw	r30, r22
 8da:	23 81       	ldd	r18, Z+3	; 0x03
 8dc:	21 fd       	sbrc	r18, 1
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <fputc+0x16>
 8e0:	8f ef       	ldi	r24, 0xFF	; 255
 8e2:	9f ef       	ldi	r25, 0xFF	; 255
 8e4:	2c c0       	rjmp	.+88     	; 0x93e <__stack+0x3f>
 8e6:	22 ff       	sbrs	r18, 2
 8e8:	16 c0       	rjmp	.+44     	; 0x916 <__stack+0x17>
 8ea:	46 81       	ldd	r20, Z+6	; 0x06
 8ec:	57 81       	ldd	r21, Z+7	; 0x07
 8ee:	24 81       	ldd	r18, Z+4	; 0x04
 8f0:	35 81       	ldd	r19, Z+5	; 0x05
 8f2:	42 17       	cp	r20, r18
 8f4:	53 07       	cpc	r21, r19
 8f6:	44 f4       	brge	.+16     	; 0x908 <__stack+0x9>
 8f8:	a0 81       	ld	r26, Z
 8fa:	b1 81       	ldd	r27, Z+1	; 0x01
 8fc:	9d 01       	movw	r18, r26
 8fe:	2f 5f       	subi	r18, 0xFF	; 255
 900:	3f 4f       	sbci	r19, 0xFF	; 255
 902:	31 83       	std	Z+1, r19	; 0x01
 904:	20 83       	st	Z, r18
 906:	8c 93       	st	X, r24
 908:	26 81       	ldd	r18, Z+6	; 0x06
 90a:	37 81       	ldd	r19, Z+7	; 0x07
 90c:	2f 5f       	subi	r18, 0xFF	; 255
 90e:	3f 4f       	sbci	r19, 0xFF	; 255
 910:	37 83       	std	Z+7, r19	; 0x07
 912:	26 83       	std	Z+6, r18	; 0x06
 914:	14 c0       	rjmp	.+40     	; 0x93e <__stack+0x3f>
 916:	8b 01       	movw	r16, r22
 918:	ec 01       	movw	r28, r24
 91a:	fb 01       	movw	r30, r22
 91c:	00 84       	ldd	r0, Z+8	; 0x08
 91e:	f1 85       	ldd	r31, Z+9	; 0x09
 920:	e0 2d       	mov	r30, r0
 922:	09 95       	icall
 924:	89 2b       	or	r24, r25
 926:	e1 f6       	brne	.-72     	; 0x8e0 <fputc+0x10>
 928:	d8 01       	movw	r26, r16
 92a:	16 96       	adiw	r26, 0x06	; 6
 92c:	8d 91       	ld	r24, X+
 92e:	9c 91       	ld	r25, X
 930:	17 97       	sbiw	r26, 0x07	; 7
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	17 96       	adiw	r26, 0x07	; 7
 936:	9c 93       	st	X, r25
 938:	8e 93       	st	-X, r24
 93a:	16 97       	sbiw	r26, 0x06	; 6
 93c:	ce 01       	movw	r24, r28
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	08 95       	ret

00000948 <__ultoa_invert>:
 948:	fa 01       	movw	r30, r20
 94a:	aa 27       	eor	r26, r26
 94c:	28 30       	cpi	r18, 0x08	; 8
 94e:	51 f1       	breq	.+84     	; 0x9a4 <__ultoa_invert+0x5c>
 950:	20 31       	cpi	r18, 0x10	; 16
 952:	81 f1       	breq	.+96     	; 0x9b4 <__ultoa_invert+0x6c>
 954:	e8 94       	clt
 956:	6f 93       	push	r22
 958:	6e 7f       	andi	r22, 0xFE	; 254
 95a:	6e 5f       	subi	r22, 0xFE	; 254
 95c:	7f 4f       	sbci	r23, 0xFF	; 255
 95e:	8f 4f       	sbci	r24, 0xFF	; 255
 960:	9f 4f       	sbci	r25, 0xFF	; 255
 962:	af 4f       	sbci	r26, 0xFF	; 255
 964:	b1 e0       	ldi	r27, 0x01	; 1
 966:	3e d0       	rcall	.+124    	; 0x9e4 <__ultoa_invert+0x9c>
 968:	b4 e0       	ldi	r27, 0x04	; 4
 96a:	3c d0       	rcall	.+120    	; 0x9e4 <__ultoa_invert+0x9c>
 96c:	67 0f       	add	r22, r23
 96e:	78 1f       	adc	r23, r24
 970:	89 1f       	adc	r24, r25
 972:	9a 1f       	adc	r25, r26
 974:	a1 1d       	adc	r26, r1
 976:	68 0f       	add	r22, r24
 978:	79 1f       	adc	r23, r25
 97a:	8a 1f       	adc	r24, r26
 97c:	91 1d       	adc	r25, r1
 97e:	a1 1d       	adc	r26, r1
 980:	6a 0f       	add	r22, r26
 982:	71 1d       	adc	r23, r1
 984:	81 1d       	adc	r24, r1
 986:	91 1d       	adc	r25, r1
 988:	a1 1d       	adc	r26, r1
 98a:	20 d0       	rcall	.+64     	; 0x9cc <__ultoa_invert+0x84>
 98c:	09 f4       	brne	.+2      	; 0x990 <__ultoa_invert+0x48>
 98e:	68 94       	set
 990:	3f 91       	pop	r19
 992:	2a e0       	ldi	r18, 0x0A	; 10
 994:	26 9f       	mul	r18, r22
 996:	11 24       	eor	r1, r1
 998:	30 19       	sub	r19, r0
 99a:	30 5d       	subi	r19, 0xD0	; 208
 99c:	31 93       	st	Z+, r19
 99e:	de f6       	brtc	.-74     	; 0x956 <__ultoa_invert+0xe>
 9a0:	cf 01       	movw	r24, r30
 9a2:	08 95       	ret
 9a4:	46 2f       	mov	r20, r22
 9a6:	47 70       	andi	r20, 0x07	; 7
 9a8:	40 5d       	subi	r20, 0xD0	; 208
 9aa:	41 93       	st	Z+, r20
 9ac:	b3 e0       	ldi	r27, 0x03	; 3
 9ae:	0f d0       	rcall	.+30     	; 0x9ce <__ultoa_invert+0x86>
 9b0:	c9 f7       	brne	.-14     	; 0x9a4 <__ultoa_invert+0x5c>
 9b2:	f6 cf       	rjmp	.-20     	; 0x9a0 <__ultoa_invert+0x58>
 9b4:	46 2f       	mov	r20, r22
 9b6:	4f 70       	andi	r20, 0x0F	; 15
 9b8:	40 5d       	subi	r20, 0xD0	; 208
 9ba:	4a 33       	cpi	r20, 0x3A	; 58
 9bc:	18 f0       	brcs	.+6      	; 0x9c4 <__ultoa_invert+0x7c>
 9be:	49 5d       	subi	r20, 0xD9	; 217
 9c0:	31 fd       	sbrc	r19, 1
 9c2:	40 52       	subi	r20, 0x20	; 32
 9c4:	41 93       	st	Z+, r20
 9c6:	02 d0       	rcall	.+4      	; 0x9cc <__ultoa_invert+0x84>
 9c8:	a9 f7       	brne	.-22     	; 0x9b4 <__ultoa_invert+0x6c>
 9ca:	ea cf       	rjmp	.-44     	; 0x9a0 <__ultoa_invert+0x58>
 9cc:	b4 e0       	ldi	r27, 0x04	; 4
 9ce:	a6 95       	lsr	r26
 9d0:	97 95       	ror	r25
 9d2:	87 95       	ror	r24
 9d4:	77 95       	ror	r23
 9d6:	67 95       	ror	r22
 9d8:	ba 95       	dec	r27
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__ultoa_invert+0x86>
 9dc:	00 97       	sbiw	r24, 0x00	; 0
 9de:	61 05       	cpc	r22, r1
 9e0:	71 05       	cpc	r23, r1
 9e2:	08 95       	ret
 9e4:	9b 01       	movw	r18, r22
 9e6:	ac 01       	movw	r20, r24
 9e8:	0a 2e       	mov	r0, r26
 9ea:	06 94       	lsr	r0
 9ec:	57 95       	ror	r21
 9ee:	47 95       	ror	r20
 9f0:	37 95       	ror	r19
 9f2:	27 95       	ror	r18
 9f4:	ba 95       	dec	r27
 9f6:	c9 f7       	brne	.-14     	; 0x9ea <__ultoa_invert+0xa2>
 9f8:	62 0f       	add	r22, r18
 9fa:	73 1f       	adc	r23, r19
 9fc:	84 1f       	adc	r24, r20
 9fe:	95 1f       	adc	r25, r21
 a00:	a0 1d       	adc	r26, r0
 a02:	08 95       	ret

00000a04 <__prologue_saves__>:
 a04:	2f 92       	push	r2
 a06:	3f 92       	push	r3
 a08:	4f 92       	push	r4
 a0a:	5f 92       	push	r5
 a0c:	6f 92       	push	r6
 a0e:	7f 92       	push	r7
 a10:	8f 92       	push	r8
 a12:	9f 92       	push	r9
 a14:	af 92       	push	r10
 a16:	bf 92       	push	r11
 a18:	cf 92       	push	r12
 a1a:	df 92       	push	r13
 a1c:	ef 92       	push	r14
 a1e:	ff 92       	push	r15
 a20:	0f 93       	push	r16
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	ca 1b       	sub	r28, r26
 a2e:	db 0b       	sbc	r29, r27
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	f8 94       	cli
 a34:	de bf       	out	0x3e, r29	; 62
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	cd bf       	out	0x3d, r28	; 61
 a3a:	09 94       	ijmp

00000a3c <__epilogue_restores__>:
 a3c:	2a 88       	ldd	r2, Y+18	; 0x12
 a3e:	39 88       	ldd	r3, Y+17	; 0x11
 a40:	48 88       	ldd	r4, Y+16	; 0x10
 a42:	5f 84       	ldd	r5, Y+15	; 0x0f
 a44:	6e 84       	ldd	r6, Y+14	; 0x0e
 a46:	7d 84       	ldd	r7, Y+13	; 0x0d
 a48:	8c 84       	ldd	r8, Y+12	; 0x0c
 a4a:	9b 84       	ldd	r9, Y+11	; 0x0b
 a4c:	aa 84       	ldd	r10, Y+10	; 0x0a
 a4e:	b9 84       	ldd	r11, Y+9	; 0x09
 a50:	c8 84       	ldd	r12, Y+8	; 0x08
 a52:	df 80       	ldd	r13, Y+7	; 0x07
 a54:	ee 80       	ldd	r14, Y+6	; 0x06
 a56:	fd 80       	ldd	r15, Y+5	; 0x05
 a58:	0c 81       	ldd	r16, Y+4	; 0x04
 a5a:	1b 81       	ldd	r17, Y+3	; 0x03
 a5c:	aa 81       	ldd	r26, Y+2	; 0x02
 a5e:	b9 81       	ldd	r27, Y+1	; 0x01
 a60:	ce 0f       	add	r28, r30
 a62:	d1 1d       	adc	r29, r1
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	f8 94       	cli
 a68:	de bf       	out	0x3e, r29	; 62
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	cd bf       	out	0x3d, r28	; 61
 a6e:	ed 01       	movw	r28, r26
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
