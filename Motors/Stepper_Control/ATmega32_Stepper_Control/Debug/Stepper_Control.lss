
Stepper_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095c  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cf  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  00001243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003da  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bd  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	int period;
	DDRD = 0x0F;					/* Make PORTD lower pins as output */
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	8a b9       	out	0x0a, r24	; 10
	period = 5000;					/* Set period in between two steps of Stepper Motor */
	while (1)
	{
		for(int i=0;i<500;i++)		/* Rotate Stepper Motor clockwise with Half step sequence; Half step angle 3.75 */
		{
			PORTD = 0x09;
  84:	29 e0       	ldi	r18, 0x09	; 9
			_delay_us(period);
			PORTD = 0x08;
  86:	f8 e0       	ldi	r31, 0x08	; 8
			_delay_us(period);
			PORTD = 0x0C;
  88:	ec e0       	ldi	r30, 0x0C	; 12
			_delay_us(period);
			PORTD = 0x04;
  8a:	74 e0       	ldi	r23, 0x04	; 4
			_delay_us(period);
			PORTD = 0x06;
  8c:	66 e0       	ldi	r22, 0x06	; 6
			_delay_us(period);
			PORTD = 0x02;
  8e:	52 e0       	ldi	r21, 0x02	; 2
			_delay_us(period);
			PORTD = 0x03;
  90:	43 e0       	ldi	r20, 0x03	; 3
			_delay_us(period);
			PORTD = 0x01;
  92:	31 e0       	ldi	r19, 0x01	; 1
#include <avr/io.h>					/* Include AVR std. library file */
#include <util/delay.h>				/* Include delay header file */


int main(void)
{
  94:	84 ef       	ldi	r24, 0xF4	; 244
  96:	91 e0       	ldi	r25, 0x01	; 1
	period = 5000;					/* Set period in between two steps of Stepper Motor */
	while (1)
	{
		for(int i=0;i<500;i++)		/* Rotate Stepper Motor clockwise with Half step sequence; Half step angle 3.75 */
		{
			PORTD = 0x09;
  98:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	af e0       	ldi	r26, 0x0F	; 15
  9c:	b7 e2       	ldi	r27, 0x27	; 39
  9e:	11 97       	sbiw	r26, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x1e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x24>
  a4:	00 00       	nop
			_delay_us(period);
			PORTD = 0x08;
  a6:	fb b9       	out	0x0b, r31	; 11
  a8:	af e0       	ldi	r26, 0x0F	; 15
  aa:	b7 e2       	ldi	r27, 0x27	; 39
  ac:	11 97       	sbiw	r26, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x2c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x32>
  b2:	00 00       	nop
			_delay_us(period);
			PORTD = 0x0C;
  b4:	eb b9       	out	0x0b, r30	; 11
  b6:	af e0       	ldi	r26, 0x0F	; 15
  b8:	b7 e2       	ldi	r27, 0x27	; 39
  ba:	11 97       	sbiw	r26, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x3a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
			_delay_us(period);
			PORTD = 0x04;
  c2:	7b b9       	out	0x0b, r23	; 11
  c4:	af e0       	ldi	r26, 0x0F	; 15
  c6:	b7 e2       	ldi	r27, 0x27	; 39
  c8:	11 97       	sbiw	r26, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x48>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
			_delay_us(period);
			PORTD = 0x06;
  d0:	6b b9       	out	0x0b, r22	; 11
  d2:	af e0       	ldi	r26, 0x0F	; 15
  d4:	b7 e2       	ldi	r27, 0x27	; 39
  d6:	11 97       	sbiw	r26, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x56>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5c>
  dc:	00 00       	nop
			_delay_us(period);
			PORTD = 0x02;
  de:	5b b9       	out	0x0b, r21	; 11
  e0:	af e0       	ldi	r26, 0x0F	; 15
  e2:	b7 e2       	ldi	r27, 0x27	; 39
  e4:	11 97       	sbiw	r26, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x64>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x6a>
  ea:	00 00       	nop
			_delay_us(period);
			PORTD = 0x03;
  ec:	4b b9       	out	0x0b, r20	; 11
  ee:	af e0       	ldi	r26, 0x0F	; 15
  f0:	b7 e2       	ldi	r27, 0x27	; 39
  f2:	11 97       	sbiw	r26, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x72>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x78>
  f8:	00 00       	nop
			_delay_us(period);
			PORTD = 0x01;
  fa:	3b b9       	out	0x0b, r19	; 11
  fc:	af e0       	ldi	r26, 0x0F	; 15
  fe:	b7 e2       	ldi	r27, 0x27	; 39
 100:	11 97       	sbiw	r26, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x80>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x86>
 106:	00 00       	nop
 108:	01 97       	sbiw	r24, 0x01	; 1
	int period;
	DDRD = 0x0F;					/* Make PORTD lower pins as output */
	period = 5000;					/* Set period in between two steps of Stepper Motor */
	while (1)
	{
		for(int i=0;i<500;i++)		/* Rotate Stepper Motor clockwise with Half step sequence; Half step angle 3.75 */
 10a:	31 f6       	brne	.-116    	; 0x98 <main+0x18>
			PORTD = 0x03;
			_delay_us(period);
			PORTD = 0x01;
			_delay_us(period);
		}
			PORTD = 0x09;			/* last one step to acquire initial position */ 
 10c:	2b b9       	out	0x0b, r18	; 11
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	97 e2       	ldi	r25, 0x27	; 39
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x92>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x98>
 118:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	9f ef       	ldi	r25, 0xFF	; 255
 11c:	a9 e6       	ldi	r26, 0x69	; 105
 11e:	b8 e1       	ldi	r27, 0x18	; 24
 120:	91 50       	subi	r25, 0x01	; 1
 122:	a0 40       	sbci	r26, 0x00	; 0
 124:	b0 40       	sbci	r27, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0xa0>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0xaa>
 12a:	00 00       	nop
 12c:	b3 cf       	rjmp	.-154    	; 0x94 <main+0x14>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
