
DC_Motor_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d5  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f5  00000000  00000000  00000a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031a  00000000  00000000  0000111e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000105  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:

volatile uint8_t Direction = 0; 

void ADC_Init()								/* ADC Initialization function */
{
	DDRC = 0x00;							/* Make ADC port as input */
  90:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87;							/* Enable ADC, with freq/128  */
  92:	87 e8       	ldi	r24, 0x87	; 135
  94:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX = 0x40;							/* Vref: Avcc, ADC channel: 0 */
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  9e:	08 95       	ret

000000a0 <ADC_Read>:
}

int ADC_Read(char channel)					/* ADC Read function */
{
	ADMUX = 0x40 | (channel & 0x07);		/* set input channel to read */
  a0:	87 70       	andi	r24, 0x07	; 7
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);					/* Start ADC conversion */
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	while (!(ADCSRA & (1<<ADIF)));			/* Wait until end of conversion by polling ADC interrupt flag */
  b2:	80 81       	ld	r24, Z
  b4:	84 ff       	sbrs	r24, 4
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <ADC_Read+0x12>
	ADCSRA |= (1<<ADIF);					/* Clear interrupt flag */
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	8f ec       	ldi	r24, 0xCF	; 207
  c4:	97 e0       	ldi	r25, 0x07	; 7
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <ADC_Read+0x26>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <ADC_Read+0x2c>
  cc:	00 00       	nop
	_delay_ms(1);							/* Wait a little bit */
	return ADCW;							/* Return ADC word */
  ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  d6:	08 95       	ret

000000d8 <__vector_1>:

ISR(INT0_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	TCCR0B |= (0<<CS00)|(0<<CS01);/* Set Fast PWM with Fosc/64 Timer0 clock */
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	85 bd       	out	0x25, r24	; 37
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	81 e1       	ldi	r24, 0x11	; 17
  f0:	9a e7       	ldi	r25, 0x7A	; 122
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__vector_1+0x1a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <__vector_1+0x24>
  fc:	00 00       	nop
	_delay_ms(5000);							/* Software de-bouncing control delay */
	TCCR0B |= (1<<CS00)|(1<<CS02);/* Set Fast PWM with Fosc/64 Timer0 clock */
  fe:	85 b5       	in	r24, 0x25	; 37
 100:	85 60       	ori	r24, 0x05	; 5
 102:	85 bd       	out	0x25, r24	; 37

}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <main>:

int main(void)
{
	DDRD &= ~(1<<PD2);						/* Make INT0 pin as Input */
 114:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << PD2);    // turn On the Pull-up
 116:	5a 9a       	sbi	0x0b, 2	; 11
	DDRD |= (1<<PD6);						/* Make OC0 pin as Output */
 118:	56 9a       	sbi	0x0a, 6	; 10
	EICRA |= (1 << ISC01);    // set INT0 to trigger to falling edge
 11a:	e9 e6       	ldi	r30, 0x69	; 105
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
 124:	e8 9a       	sbi	0x1d, 0	; 29
	sei();									/* Enable Global Interrupt */
 126:	78 94       	sei
	ADC_Init();								/* Initialize ADC */
 128:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	TCNT0 = 0;								/* Set timer0 count zero */
 12c:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<WGM00)|(1<<WGM01)|(1<<COM0A1);
 12e:	84 b5       	in	r24, 0x24	; 36
 130:	83 68       	ori	r24, 0x83	; 131
 132:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00)|(1<<CS02);/* Set Fast PWM with Fosc/64 Timer0 clock */
 134:	85 b5       	in	r24, 0x25	; 37
 136:	85 60       	ori	r24, 0x05	; 5
 138:	85 bd       	out	0x25, r24	; 37
	while(1)
	{
		OCR0A = (ADC_Read(0)/4);				/* Read ADC and map it into 0-255 to write in OCR0 register */
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_Read>
 140:	99 23       	and	r25, r25
 142:	0c f4       	brge	.+2      	; 0x146 <main+0x32>
 144:	03 96       	adiw	r24, 0x03	; 3
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	87 bd       	out	0x27, r24	; 39
 150:	f4 cf       	rjmp	.-24     	; 0x13a <main+0x26>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
