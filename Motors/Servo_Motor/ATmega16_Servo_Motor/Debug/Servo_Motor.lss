
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073a  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ef  00000000  00000000  00000fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000080  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Wait>:
#include <avr/io.h>									/* Include AVR std. library file */
#include <util/delay.h>								/* Include Delay header file */

//Simple Wait Function
void Wait()
{
  80:	22 e3       	ldi	r18, 0x32	; 50
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	fc 01       	movw	r30, r24
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <Wait+0x8>
  8c:	fc 01       	movw	r30, r24
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <Wait+0xe>
  92:	fc 01       	movw	r30, r24
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <Wait+0x14>
  98:	21 50       	subi	r18, 0x01	; 1
	uint8_t i;
	for(i=0;i<50;i++)
  9a:	a9 f7       	brne	.-22     	; 0x86 <Wait+0x6>
		_delay_loop_2(0);
		_delay_loop_2(0);
		_delay_loop_2(0);
	}

}
  9c:	08 95       	ret

0000009e <main>:

void main()
{
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 6a       	ori	r24, 0xA2	; 162
  a6:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  a8:	e1 e8       	ldi	r30, 0x81	; 129
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8b 61       	ori	r24, 0x1B	; 27
  b0:	80 83       	st	Z, r24

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	93 e1       	ldi	r25, 0x13	; 19
  b6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  ba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

	DDRB|=(1<<PB1);   //PWM Pins as Out
  be:	21 9a       	sbi	0x04, 1	; 4

	while(1)
	{

		OCR1A=97;   //0 degree
  c0:	c8 e8       	ldi	r28, 0x88	; 136
  c2:	d0 e0       	ldi	r29, 0x00	; 0
  c4:	0f 2e       	mov	r0, r31
  c6:	f1 e6       	ldi	r31, 0x61	; 97
  c8:	af 2e       	mov	r10, r31
  ca:	b1 2c       	mov	r11, r1
  cc:	f0 2d       	mov	r31, r0
		Wait();

		OCR1A=316;  //90 degree
  ce:	0f 2e       	mov	r0, r31
  d0:	fc e3       	ldi	r31, 0x3C	; 60
  d2:	cf 2e       	mov	r12, r31
  d4:	dd 24       	eor	r13, r13
  d6:	d3 94       	inc	r13
  d8:	f0 2d       	mov	r31, r0
		Wait();

		OCR1A=425;  //135 degree
  da:	0f 2e       	mov	r0, r31
  dc:	f9 ea       	ldi	r31, 0xA9	; 169
  de:	ef 2e       	mov	r14, r31
  e0:	ff 24       	eor	r15, r15
  e2:	f3 94       	inc	r15
  e4:	f0 2d       	mov	r31, r0

		Wait();

		OCR1A=535;  //180 degree
  e6:	07 e1       	ldi	r16, 0x17	; 23
  e8:	12 e0       	ldi	r17, 0x02	; 2
	DDRB|=(1<<PB1);   //PWM Pins as Out

	while(1)
	{

		OCR1A=97;   //0 degree
  ea:	b9 82       	std	Y+1, r11	; 0x01
  ec:	a8 82       	st	Y, r10
		Wait();
  ee:	0e 94 40 00 	call	0x80	; 0x80 <Wait>

		OCR1A=316;  //90 degree
  f2:	d9 82       	std	Y+1, r13	; 0x01
  f4:	c8 82       	st	Y, r12
		Wait();
  f6:	0e 94 40 00 	call	0x80	; 0x80 <Wait>

		OCR1A=425;  //135 degree
  fa:	f9 82       	std	Y+1, r15	; 0x01
  fc:	e8 82       	st	Y, r14

		Wait();
  fe:	0e 94 40 00 	call	0x80	; 0x80 <Wait>

		OCR1A=535;  //180 degree
 102:	19 83       	std	Y+1, r17	; 0x01
 104:	08 83       	st	Y, r16
		Wait();
 106:	0e 94 40 00 	call	0x80	; 0x80 <Wait>
 10a:	ef cf       	rjmp	.-34     	; 0xea <main+0x4c>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
