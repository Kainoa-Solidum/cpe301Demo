
ATmega16_Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000192  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d3  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000165  00000000  00000000  000003df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001cd  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  00000735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <stdio.h>									/* Include std. library file */
#include <util/delay.h>								/* Include Delay header file */

int main(void)
{
	DDRD |= (1<<PD5);								/* Make OC1A pin as output */ 
  6c:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;										/* Set timer1 count zero */
  6e:	1d bc       	out	0x2d, r1	; 45
  70:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;									/* Set TOP count for timer1 in ICR1 register */
  72:	83 ec       	ldi	r24, 0xC3	; 195
  74:	99 e0       	ldi	r25, 0x09	; 9
  76:	97 bd       	out	0x27, r25	; 39
  78:	86 bd       	out	0x26, r24	; 38
	TCCR1A = (1<<WGM11)|(1<<COM1A1);				/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
  7a:	82 e8       	ldi	r24, 0x82	; 130
  7c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  7e:	8b e1       	ldi	r24, 0x1B	; 27
  80:	8e bd       	out	0x2e, r24	; 46
	while(1)
	{
		OCR1A = 65;									/* Set servo shaft at -90° position */
  82:	41 e4       	ldi	r20, 0x41	; 65
  84:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(1500);
		OCR1A = 175;								/* Set servo shaft at 0° position */
  86:	2f ea       	ldi	r18, 0xAF	; 175
  88:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(1500);
		OCR1A = 300;								/* Set servo at +90° position */
  8a:	8c e2       	ldi	r24, 0x2C	; 44
  8c:	91 e0       	ldi	r25, 0x01	; 1
	ICR1 = 2499;									/* Set TOP count for timer1 in ICR1 register */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);				/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	while(1)
	{
		OCR1A = 65;									/* Set servo shaft at -90° position */
  8e:	5b bd       	out	0x2b, r21	; 43
  90:	4a bd       	out	0x2a, r20	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	6f ef       	ldi	r22, 0xFF	; 255
  94:	7e e9       	ldi	r23, 0x9E	; 158
  96:	e4 e2       	ldi	r30, 0x24	; 36
  98:	61 50       	subi	r22, 0x01	; 1
  9a:	70 40       	sbci	r23, 0x00	; 0
  9c:	e0 40       	sbci	r30, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
		_delay_ms(1500);
		OCR1A = 175;								/* Set servo shaft at 0° position */
  a4:	3b bd       	out	0x2b, r19	; 43
  a6:	2a bd       	out	0x2a, r18	; 42
  a8:	6f ef       	ldi	r22, 0xFF	; 255
  aa:	7e e9       	ldi	r23, 0x9E	; 158
  ac:	e4 e2       	ldi	r30, 0x24	; 36
  ae:	61 50       	subi	r22, 0x01	; 1
  b0:	70 40       	sbci	r23, 0x00	; 0
  b2:	e0 40       	sbci	r30, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
		_delay_ms(1500);
		OCR1A = 300;								/* Set servo at +90° position */
  ba:	9b bd       	out	0x2b, r25	; 43
  bc:	8a bd       	out	0x2a, r24	; 42
  be:	6f ef       	ldi	r22, 0xFF	; 255
  c0:	7e e9       	ldi	r23, 0x9E	; 158
  c2:	e4 e2       	ldi	r30, 0x24	; 36
  c4:	61 50       	subi	r22, 0x01	; 1
  c6:	70 40       	sbci	r23, 0x00	; 0
  c8:	e0 40       	sbci	r30, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
  d0:	de cf       	rjmp	.-68     	; 0x8e <main+0x22>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
