
APDS9660_PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000460  000004f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800108  00800108  000004fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c9  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8c  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077c  00000000  00000000  00002361  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00002ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d3  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d5  00000000  00000000  000031d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e6       	ldi	r30, 0x60	; 96
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 30       	cpi	r26, 0x08	; 8
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e0       	ldi	r26, 0x08	; 8
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 31       	cpi	r26, 0x16	; 22
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  ea:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
  f2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f6:	88 e4       	ldi	r24, 0x48	; 72
  f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  fc:	08 95       	ret

000000fe <i2c_start>:
  fe:	94 ea       	ldi	r25, 0xA4	; 164
 100:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 104:	ec eb       	ldi	r30, 0xBC	; 188
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	90 81       	ld	r25, Z
 10a:	99 23       	and	r25, r25
 10c:	ec f7       	brge	.-6      	; 0x108 <i2c_start+0xa>
 10e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 112:	98 7f       	andi	r25, 0xF8	; 248
 114:	98 30       	cpi	r25, 0x08	; 8
 116:	11 f0       	breq	.+4      	; 0x11c <i2c_start+0x1e>
 118:	90 31       	cpi	r25, 0x10	; 16
 11a:	a1 f4       	brne	.+40     	; 0x144 <i2c_start+0x46>
 11c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 126:	ec eb       	ldi	r30, 0xBC	; 188
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	ec f7       	brge	.-6      	; 0x12a <i2c_start+0x2c>
 130:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 134:	98 7f       	andi	r25, 0xF8	; 248
 136:	98 31       	cpi	r25, 0x18	; 24
 138:	39 f0       	breq	.+14     	; 0x148 <i2c_start+0x4a>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 34       	cpi	r25, 0x40	; 64
 13e:	29 f4       	brne	.+10     	; 0x14a <i2c_start+0x4c>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret

0000014c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 14c:	84 e9       	ldi	r24, 0x94	; 148
 14e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR0 & (1<<TWSTO));
 152:	ec eb       	ldi	r30, 0xBC	; 188
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	84 fd       	sbrc	r24, 4
 15a:	fd cf       	rjmp	.-6      	; 0x156 <i2c_stop+0xa>

}/* i2c_stop */
 15c:	08 95       	ret

0000015e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR0 = data;
 15e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR0 = (1<<TWINT) | (1<<TWEN);
 162:	84 e8       	ldi	r24, 0x84	; 132
 164:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR0 & (1<<TWINT)));
 168:	ec eb       	ldi	r30, 0xBC	; 188
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	88 23       	and	r24, r24
 170:	ec f7       	brge	.-6      	; 0x16c <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS_PB & 0xF8;
 172:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 176:	98 7f       	andi	r25, 0xF8	; 248
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	98 32       	cpi	r25, 0x28	; 40
 17c:	09 f4       	brne	.+2      	; 0x180 <i2c_write+0x22>
 17e:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 180:	08 95       	ret

00000182 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 182:	84 ec       	ldi	r24, 0xC4	; 196
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR0 & (1<<TWINT)));    
 188:	ec eb       	ldi	r30, 0xBC	; 188
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	ec f7       	brge	.-6      	; 0x18c <i2c_readAck+0xa>

    return TWDR0;
 192:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
 196:	08 95       	ret

00000198 <init_uart>:
#define APDS9960_WRITE 0x72
#define APDS9960_READ 0x73 

void init_uart(uint16_t baudrate){

	uint16_t UBRR_val = (F_CPU/16)/(baudrate-1);
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	9c 01       	movw	r18, r24
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	60 e4       	ldi	r22, 0x40	; 64
 1a2:	72 e4       	ldi	r23, 0x42	; 66
 1a4:	8f e0       	ldi	r24, 0x0F	; 15
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__udivmodsi4>

	UBRR0H = UBRR_val >> 8;
 1ac:	83 2f       	mov	r24, r19
 1ae:	99 27       	eor	r25, r25
 1b0:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRR_val;
 1b4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0B |= (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // UART TX (Transmit - senden) einschalten
 1b8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	88 69       	ori	r24, 0x98	; 152
 1c0:	80 83       	st	Z, r24
	UCSR0C |= (1<<USBS0) | (3<<UCSZ00); //Modus Asynchron 8N1 (8 Datenbits, No Parity, 1 Stopbit)
 1c2:	e2 ec       	ldi	r30, 0xC2	; 194
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8e 60       	ori	r24, 0x0E	; 14
 1ca:	80 83       	st	Z, r24
 1cc:	08 95       	ret

000001ce <uart_putc>:
}

void uart_putc(unsigned char c){

	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
 1ce:	e0 ec       	ldi	r30, 0xC0	; 192
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	90 81       	ld	r25, Z
 1d4:	95 ff       	sbrs	r25, 5
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <uart_putc+0x4>
	UDR0 = c; // output character saved in c
 1d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1dc:	08 95       	ret

000001de <uart_puts>:
}

void uart_puts(char *s){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	while(*s){
 1e4:	88 81       	ld	r24, Y
 1e6:	88 23       	and	r24, r24
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <uart_puts+0x18>
 1ea:	21 96       	adiw	r28, 0x01	; 1
		uart_putc(*s);
 1ec:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_putc>
	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
	UDR0 = c; // output character saved in c
}

void uart_puts(char *s){
	while(*s){
 1f0:	89 91       	ld	r24, Y+
 1f2:	81 11       	cpse	r24, r1
 1f4:	fb cf       	rjmp	.-10     	; 0x1ec <uart_puts+0xe>
		uart_putc(*s);
		s++;
	}
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <init_APDS9960>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	82 e5       	ldi	r24, 0x52	; 82
 200:	97 e0       	ldi	r25, 0x07	; 7
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <init_APDS9960+0x6>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <init_APDS9960+0x10>
 20c:	00 00       	nop
int16_t raw_B = 0;
int16_t raw_C = 0;;

void init_APDS9960(void){
	_delay_ms(150);										/* Power up time >100ms */
	i2c_start(APDS9960_WRITE);
 20e:	82 e7       	ldi	r24, 0x72	; 114
 210:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_start>
	i2c_write(0x80); // set pointer to ENABLE REGISTER
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 af 00 	call	0x15e	; 0x15e <i2c_write>
	i2c_write(0x03); // write 0x06 to ENABLE REGISTER
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	0e 94 af 00 	call	0x15e	; 0x15e <i2c_write>
	i2c_stop();
 220:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>

	i2c_start(APDS9960_WRITE);
 224:	82 e7       	ldi	r24, 0x72	; 114
 226:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_start>
	i2c_write(0x81); // set pointer to ALS ADC Integration Time
 22a:	81 e8       	ldi	r24, 0x81	; 129
 22c:	0e 94 af 00 	call	0x15e	; 0x15e <i2c_write>
	i2c_write(0xDB); // 219 =0XDB = 37 = 103 ms = 37889
 230:	8b ed       	ldi	r24, 0xDB	; 219
 232:	0e 94 af 00 	call	0x15e	; 0x15e <i2c_write>
	i2c_stop();
 236:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>

	i2c_start(APDS9960_WRITE);
 23a:	82 e7       	ldi	r24, 0x72	; 114
 23c:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_start>
	i2c_write(0x8F); // set pointer to CONTROL<AGAIN>
 240:	8f e8       	ldi	r24, 0x8F	; 143
 242:	0e 94 af 00 	call	0x15e	; 0x15e <i2c_write>
	i2c_write(0x01); // ALS and Color Gain Control = 0 = x1
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 af 00 	call	0x15e	; 0x15e <i2c_write>
	i2c_stop();
 24c:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
 250:	08 95       	ret

00000252 <getreading>:
}

void getreading(void){

	i2c_start(APDS9960_WRITE);
 252:	82 e7       	ldi	r24, 0x72	; 114
 254:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_start>
	i2c_write(0x94); // set pointer to CDATA
 258:	84 e9       	ldi	r24, 0x94	; 148
 25a:	0e 94 af 00 	call	0x15e	; 0x15e <i2c_write>
	i2c_stop();
 25e:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>

	i2c_start(APDS9960_READ);
 262:	83 e7       	ldi	r24, 0x73	; 115
 264:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_start>

	raw_C =  ((uint8_t)i2c_readAck());
 268:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_readAck>
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 272:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	raw_C |= ((uint8_t)i2c_readAck())<<8;
 276:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_readAck>
 27a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 27e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 282:	38 2b       	or	r19, r24
 284:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
 288:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>

	raw_R = ((uint8_t)i2c_readAck());
 28c:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_readAck>
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <raw_R+0x1>
 296:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <raw_R>
	raw_R |= ((uint8_t)i2c_readAck())<<8;
 29a:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_readAck>
 29e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <raw_R>
 2a2:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <raw_R+0x1>
 2a6:	38 2b       	or	r19, r24
 2a8:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <raw_R+0x1>
 2ac:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <raw_R>

	raw_G = ((uint8_t)i2c_readAck());
 2b0:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_readAck>
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <raw_G+0x1>
 2ba:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <raw_G>
	raw_G |= ((uint8_t)i2c_readAck())<<8;
 2be:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_readAck>
 2c2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <raw_G>
 2c6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <raw_G+0x1>
 2ca:	38 2b       	or	r19, r24
 2cc:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <raw_G+0x1>
 2d0:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <raw_G>

	raw_B = ((uint8_t)i2c_readAck());
 2d4:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_readAck>
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <raw_B+0x1>
 2de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <raw_B>
	raw_B |= ((uint8_t)i2c_readAck())<<8;
 2e2:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_readAck>
 2e6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <raw_B>
 2ea:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <raw_B+0x1>
 2ee:	38 2b       	or	r19, r24
 2f0:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <raw_B+0x1>
 2f4:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <raw_B>

	i2c_stop();
 2f8:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_stop>
 2fc:	08 95       	ret

000002fe <main>:

}

int main(void){
	
	init_uart(9600);
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	95 e2       	ldi	r25, 0x25	; 37
 302:	0e 94 cc 00 	call	0x198	; 0x198 <init_uart>
	i2c_init();
 306:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	init_APDS9960();
 30a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <init_APDS9960>
	
	while(1){
		getreading();
 30e:	0e 94 29 01 	call	0x252	; 0x252 <getreading>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 312:	4a e0       	ldi	r20, 0x0A	; 10
 314:	60 e1       	ldi	r22, 0x10	; 16
 316:	71 e0       	ldi	r23, 0x01	; 1
 318:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 31c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 320:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__itoa_ncheck>
		
		itoa(raw_C, buffer, 10);
		uart_puts(buffer);
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_puts>
		uart_puts("  ");
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_puts>
 334:	4a e0       	ldi	r20, 0x0A	; 10
 336:	60 e1       	ldi	r22, 0x10	; 16
 338:	71 e0       	ldi	r23, 0x01	; 1
 33a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <raw_R>
 33e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <raw_R+0x1>
 342:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__itoa_ncheck>
		
		itoa(raw_R, buffer, 10);
		uart_puts(buffer);
 346:	80 e1       	ldi	r24, 0x10	; 16
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_puts>
		uart_puts("  ");
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_puts>
 356:	4a e0       	ldi	r20, 0x0A	; 10
 358:	60 e1       	ldi	r22, 0x10	; 16
 35a:	71 e0       	ldi	r23, 0x01	; 1
 35c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <raw_G>
 360:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <raw_G+0x1>
 364:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__itoa_ncheck>
		
		itoa(raw_G, buffer, 10);
		uart_puts(buffer);
 368:	80 e1       	ldi	r24, 0x10	; 16
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_puts>
		uart_puts("  ");
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_puts>
 378:	4a e0       	ldi	r20, 0x0A	; 10
 37a:	60 e1       	ldi	r22, 0x10	; 16
 37c:	71 e0       	ldi	r23, 0x01	; 1
 37e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <raw_B>
 382:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <raw_B+0x1>
 386:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__itoa_ncheck>
		
		itoa(raw_B, buffer, 10);
		uart_puts(buffer);
 38a:	80 e1       	ldi	r24, 0x10	; 16
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_puts>
		uart_puts("  \r\n");
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_puts>
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	83 ed       	ldi	r24, 0xD3	; 211
 39e:	90 e3       	ldi	r25, 0x30	; 48
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0xa2>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0xac>
 3aa:	00 00       	nop
 3ac:	b0 cf       	rjmp	.-160    	; 0x30e <main+0x10>

000003ae <__udivmodsi4>:
 3ae:	a1 e2       	ldi	r26, 0x21	; 33
 3b0:	1a 2e       	mov	r1, r26
 3b2:	aa 1b       	sub	r26, r26
 3b4:	bb 1b       	sub	r27, r27
 3b6:	fd 01       	movw	r30, r26
 3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <__udivmodsi4_ep>

000003ba <__udivmodsi4_loop>:
 3ba:	aa 1f       	adc	r26, r26
 3bc:	bb 1f       	adc	r27, r27
 3be:	ee 1f       	adc	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	a2 17       	cp	r26, r18
 3c4:	b3 07       	cpc	r27, r19
 3c6:	e4 07       	cpc	r30, r20
 3c8:	f5 07       	cpc	r31, r21
 3ca:	20 f0       	brcs	.+8      	; 0x3d4 <__udivmodsi4_ep>
 3cc:	a2 1b       	sub	r26, r18
 3ce:	b3 0b       	sbc	r27, r19
 3d0:	e4 0b       	sbc	r30, r20
 3d2:	f5 0b       	sbc	r31, r21

000003d4 <__udivmodsi4_ep>:
 3d4:	66 1f       	adc	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	1a 94       	dec	r1
 3de:	69 f7       	brne	.-38     	; 0x3ba <__udivmodsi4_loop>
 3e0:	60 95       	com	r22
 3e2:	70 95       	com	r23
 3e4:	80 95       	com	r24
 3e6:	90 95       	com	r25
 3e8:	9b 01       	movw	r18, r22
 3ea:	ac 01       	movw	r20, r24
 3ec:	bd 01       	movw	r22, r26
 3ee:	cf 01       	movw	r24, r30
 3f0:	08 95       	ret

000003f2 <__itoa_ncheck>:
 3f2:	bb 27       	eor	r27, r27
 3f4:	4a 30       	cpi	r20, 0x0A	; 10
 3f6:	31 f4       	brne	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f8:	99 23       	and	r25, r25
 3fa:	22 f4       	brpl	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fc:	bd e2       	ldi	r27, 0x2D	; 45
 3fe:	90 95       	com	r25
 400:	81 95       	neg	r24
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	0c 94 05 02 	jmp	0x40a	; 0x40a <__utoa_common>

00000408 <__utoa_ncheck>:
 408:	bb 27       	eor	r27, r27

0000040a <__utoa_common>:
 40a:	fb 01       	movw	r30, r22
 40c:	55 27       	eor	r21, r21
 40e:	aa 27       	eor	r26, r26
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	aa 1f       	adc	r26, r26
 416:	a4 17       	cp	r26, r20
 418:	10 f0       	brcs	.+4      	; 0x41e <__utoa_common+0x14>
 41a:	a4 1b       	sub	r26, r20
 41c:	83 95       	inc	r24
 41e:	50 51       	subi	r21, 0x10	; 16
 420:	b9 f7       	brne	.-18     	; 0x410 <__utoa_common+0x6>
 422:	a0 5d       	subi	r26, 0xD0	; 208
 424:	aa 33       	cpi	r26, 0x3A	; 58
 426:	08 f0       	brcs	.+2      	; 0x42a <__utoa_common+0x20>
 428:	a9 5d       	subi	r26, 0xD9	; 217
 42a:	a1 93       	st	Z+, r26
 42c:	00 97       	sbiw	r24, 0x00	; 0
 42e:	79 f7       	brne	.-34     	; 0x40e <__utoa_common+0x4>
 430:	b1 11       	cpse	r27, r1
 432:	b1 93       	st	Z+, r27
 434:	11 92       	st	Z+, r1
 436:	cb 01       	movw	r24, r22
 438:	0c 94 1e 02 	jmp	0x43c	; 0x43c <strrev>

0000043c <strrev>:
 43c:	dc 01       	movw	r26, r24
 43e:	fc 01       	movw	r30, r24
 440:	67 2f       	mov	r22, r23
 442:	71 91       	ld	r23, Z+
 444:	77 23       	and	r23, r23
 446:	e1 f7       	brne	.-8      	; 0x440 <strrev+0x4>
 448:	32 97       	sbiw	r30, 0x02	; 2
 44a:	04 c0       	rjmp	.+8      	; 0x454 <strrev+0x18>
 44c:	7c 91       	ld	r23, X
 44e:	6d 93       	st	X+, r22
 450:	70 83       	st	Z, r23
 452:	62 91       	ld	r22, -Z
 454:	ae 17       	cp	r26, r30
 456:	bf 07       	cpc	r27, r31
 458:	c8 f3       	brcs	.-14     	; 0x44c <strrev+0x10>
 45a:	08 95       	ret

0000045c <_exit>:
 45c:	f8 94       	cli

0000045e <__stop_program>:
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__stop_program>
